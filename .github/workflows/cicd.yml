# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'

jobs:
  build:

    runs-on: ubuntu-latest #[self-hosted, ubuntu, ec2]
    defaults:
      run:
        shell: bash
        working-directory: ./

    strategy:
      matrix:
        node-version: [23.x]
      # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: main
    
    - name: Generate hash for tag
      run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_EMAIL }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Patch the application
      working-directory: ./main
      run: |
        ./init_env.sh -k ${{ secrets.API_KEY }} -p ${{ vars.EC2_HOST }}

    - name: Build and push frontend Docker images
      working-directory: ./main/moviebuddy_frontend
      run: |
        docker build . -t ${{ vars.DOCKER_USERNAME }}/moviebuddy-frontend:latest --platform linux/amd64
        docker push ${{ vars.DOCKER_USERNAME }}/moviebuddy-frontend
    
    - name: Build and push backend Docker images
      working-directory: ./main/backend
      run: |
        docker build . -t ${{ vars.DOCKER_USERNAME }}/moviebuddy-backend:latest --platform linux/amd64
        docker push ${{ vars.DOCKER_USERNAME }}/moviebuddy-backend
    
  deploy:
    if: ${{ always() }}
    needs: [build]

    runs-on: ubuntu-latest #[self-hosted, ubuntu, ec2]
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
    - name: Login
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ vars.EC2_HOST }}
        username: ${{ vars.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script_stop: true
        script: |
          cd ~
          rm -rf moviebuddy
          git clone git@github.com:James-Leste/moviebuddy.git
          cd ~/moviebuddy
          ./init_env.sh -k ${{ secrets.API_KEY }} -p ${{ vars.EC2_HOST }}
          ls -la
          docker compose down
          docker compose pull
          docker compose up -d
          docker image prune -a -f
